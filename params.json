{"name":"Codegen","tagline":"A tool to provide automatic C++ bindings for iOS and Android libraries","body":"### Introduction\r\nCodegen implements a proxy based pattern to wrap underlying iOS and Android libraries to provide a C++ interface for them. It implements all the basic converters and JNI details under the hood, so you don't need to worry about them. \r\n\r\n### Setup\r\nAfter cloning this repository, be sure to udpate and initialize all submodules with\r\n```\r\n$ git submodule update --init --recursive\r\n```\r\nNote, we depend on our parser https://github.com/proxy-gen/clocxml to parse ObjC header files properly. The gen_bridge_metadata script that came with MacOSX wasn't providing us with all the parse tokens we needed.\r\n\r\n### Using this tool\r\nThe main tool that you interface with is a python script that you can find under 'generator/generator.py'. On Android, we provide an additional convenience wrapper call 'codegen.sh' that you can find under samples for Android project.\r\n\r\nPlatform specific details are as follows\r\n\r\n### Android\r\nPlease follow along with the samples provided under codegen/samples\r\n\r\nFor Android we recommend that you interact with the wrapper codegen.sh script instead of directly invoking the generator/generator.py\r\n\r\nOverall there are 3 steps to this process. \r\na) You create a full blown config file from a minimal config file you seed the tool with \r\nb) You make an necessary changes to the generated config as required, and then you generate the C++ files that implements the proxy patterns. This also builds a static library\r\nc) Finally, you package them\r\n\r\nsamples/platforms/android/android: Contains the configuration setup to generate proxies for the entire Android SDK\r\n\r\nFirst, setup the following environment variables\r\n```\r\nANDROID_HOME=/path/to/android/sdk\r\nNDK_HOME=/path/to/android/ndk\r\nCODEGEN_HOME=/path/to/codegen\r\n```\r\nYou would need to ensure that the Android SDK has the following installed \r\n\r\nBuild Tools for android-18 \r\nSystem Image for Android 2.2 (API 8).  \r\n\t\r\nNext, run the following in order under cxx\r\n```\r\n./codegen.sh --configure /path/to/minimum/config/file # Generates the full blown config\r\n./codegen.sh --generate  # Generates the C++ proxy classes\r\n./codegen.sh --package\t # Packages the project as a pre-built binary\r\n```\r\n\r\nsamples/platforms/android/facebook: Contains the configuration setup to generate proxies for the entire Facebook SDK. \r\n\r\nConfiguring this sample is similar to the steps above to generate the Android SDK but has the additional steps of requiring to build the facebook sdk and to add the `_callback` tags in the config. \r\n\r\nFor example, the `com.facebook.Session#open` function accepts an implementation of the callback `com.facebook.Session$StatusCallback`. At some point in the future, the native Facebook SDK will callback into `com.facebook.Session$StatusCallback#call`. We need to make sure that this call goes all the way through into the C++ layer and is handled by the C++ implementation of the callback.\r\n\r\nBy tagging the `com.facebook.Session#open` as a callback, we make sure that the code generator will propagate the callback invocation all the way into the C++ layer.\r\n\r\nBefore getting started, navigate to `java\\facebook-android-sdk-3.0.1\\facebook` and then run `ant debug` to build the facebook sdk\r\n\r\nThen, as usual,\r\n\r\nFirst, setup the following environment variables\r\n```\r\nANDROID_HOME=/path/to/android/sdk\r\nNDK_HOME=/path/to/android/ndk\r\nCODEGEN_HOME=/path/to/codegen\r\n```\r\nYou would need to ensure that the Android SDK has the following installed \r\n\r\nBuild Tools for android-18 \r\nSystem Image for Android 2.2 (API 8).  \r\n\t\r\nNext, run the following under `cxx`\r\n```\r\n./codegen.sh --configure /path/to/minimal/config/file # Generates the full blown config\r\n```\t\r\n\t\r\nOpen up the full blown config file and add the `_callback` tag to the following classes and functions\r\n\r\n'com.facebook.Request$Callback'\r\n'com.facebook.Request$Callback#onCompleted'\r\n'com.facebook.Request$GraphPlaceListCallback'\r\n'com.facebook.Request$GraphPlaceListCallback#onCompleted'\r\n'com.facebook.Request$GraphUserCallback'\r\n'com.facebook.Request$GraphUserCallback#onCompleted'\r\n'com.facebook.Request$GraphUserListCallback'\r\n'com.facebook.Request$GraphUserListCallback#onCompleted'\r\n'com.facebook.Session$StatusCallback'\r\n'com.facebook.Session$StatusCallback#call'\r\n\t\t\r\nSample snippet of the changes are below\r\n```\r\n\t{\r\n\t\t'name' : 'com.facebook.Request$Callback',\r\n\t\t'tags' : ['_interface', '_proxy', '_callback'],\r\n\t\t'fields' : [\r\n\t\t],\t\r\n\t\t'functions' : [\r\n\t\t\t{\r\n\t\t\t\t'name' : 'onCompleted',\r\n\t\t\t\t'tags' : ['_instance', '_proxy', '_callback'],\r\n\t\t\t\t'params' : [\r\n\t\tâ€¦\r\n\t}\r\n```\t\r\n\t\r\nOnce the above is done, continue as before\r\n\r\nRun the following in order under `cxx`\r\n```\r\n./codegen.sh --generate  # Generates the C++ proxy classes\r\n./codegen.sh --package\t  # Packages the project as a pre-built binary\r\n```\t\r\nThe `samples/platforms/android/facebook\\cxx\\samples\\SessionLoginSampleCXX` is a sample C++ application that uses the Facebook SDK to perform basic tasks (Login/Logout/Get Friends)\r\n\r\n\r\n### iOS\r\n\r\nThe samples/platforms/ios/facebook directory contains an example of how to use this tool to generate proxies for nearly all of `FacebookSDK.framework`. The latest FacebookSDK framework is located in the `objc` subdirectory. An example of using the generated Facebook API to perform basic tasks is located under the `TestFacebookCXX` subdirectory. Two shell scripts wrap the `--generate-config` and `--generate-code` invocations of this tool under the `cxx` subdirectory. The input config file and generated code are also located under the `cxx` subdirectory.\r\n\r\nFirst, run the `generate_config.sh` script from the `cxx` directory via \r\n```\r\n./generate_config.sh\r\n```\r\nIt may take half a minute to create the AST of the `FacebookSDK.framework` headers and parse the metadata.\r\n\r\nTo build a static library for the `armv7` and `i386` architectures, change to the `generated/project` subdirectory and run `make`. The fat library will be located under the `lib/fat` subdirectory after completion.\r\n\r\nOpen the `TestFacebookCXX` Xcode project and notice that the target's `Header Search Path` settings contain the generated includes directory. Also notice that the project links with the fat library that we created with `make`. This project uses Objective-C for the UI, but all button callbacks are written in C++. You can build an run this project on the iOS Simulator.\r\n\r\n\r\n### Authors and Contributors\r\nThis project is open sourced as part of the work the Mobile ZDK team did for Zynga.com. Android work was lead by Ron Vergis (@rvergis), iOS work was lead by Wesley Souza (@wesjarrettsouza) and Andrew Ushnakov. The project and team was managed by Shiva Bhattacharjee (@bhattas)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}