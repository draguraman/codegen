<?xml version="1.0" encoding="UTF-8"?>
<project name="android.cxx" basedir="." default="help">

    <!--                                                                    -->
    <!--                        Properties                                  -->
    <!--                                                                    -->

    <property environment="env" />
    <property file="local.properties" />
    <property file="ant.properties" />
    <property file="project.properties" />

    <property name="deploy.platform" value="android" />
    <property name="generator.path" value="${env.PATH}:.:${sdk.dir}/platform-tools" />

    <!-- Early fail, sdk.dir should always be set, run "./setup.sh -s /path/to/sdk -->
    <fail unless="sdk.dir" message="sdk.dir is missing. Run './setup.sh -s /path/to/sdk -n /path/to/ndk' to generate local.properties."/>
    <fail unless="ndk.dir" message="ndk.dir is missing. Run './setup.sh -s /path/to/sdk -n /path/to/ndk' to generate local.properties."/>

    <!--                                                                    -->
    <!--                        Private Targets                             -->
    <!--                                                                    -->

    <target name="debug" description="Builds cxx projects for debug">
        <property name="build.target" value="debug" />
        <antcall target="-build.cxx.runtimes" />
    </target>
    
    <target name="release" description="Builds cxx projects for release">
        <property name="build.target" value="release" />
        <antcall target="-build.cxx.runtimes" />
    </target>

    <target name="clean" depends="-clean.cxx.runtimes" description="Clean cxx runtimes">
        <delete includeemptydirs="true" failonerror="false">
          <fileset dir="." includes="libs/**"/>
        </delete>
    </target>
    
    <target name="help" description="Displays ant -projecthelp">
        <exec executable="ant" failonerror="true" failifexecutionfails="true">
            <arg value="-projecthelp"/>
        </exec>
    </target>

    <!--                                                                    -->
    <!--                        Private Targets                             -->
    <!--                                                                    -->

    <target name="-call.cxx.runtime">
        <antcall target="${call.target}">
            <param name="cxx.framework.name" value="ZyngaCXX" />
            <param name="cxx.project.dir.name" value="ZyngaCXX" />
            <param name="cxx.libs.dir.name" value="ZyngaCXX" />
        </antcall>
    </target>

    <target name="-setup.cxx.runtime.call">
        <property name="cxx.path.to.project.dir" value="runtime/${cxx.project.dir.name}" />
        <available file="${cxx.path.to.project.dir}" property="cxx.path.to.project.dir.present" />
    </target>


    <!--                        Clean                                       -->

    <target name="-clean.cxx.runtimes">
        <antcall target="-call.cxx.runtime">
            <param name="call.target" value="-clean.cxx.runtime"/>
        </antcall>
    </target>

    <target name="-clean.cxx.runtime" depends="-setup.cxx.runtime.call" if="cxx.path.to.project.dir.present">
        <subant target="clean">
          <property name="sdk.dir" value="${sdk.dir}"/>
          <property name="dont.do.deps" value="true"/>
          <property name="proguard.enabled" value="false"/>
          <fileset dir="." includes="*/**/build.xml" excludes="externals/"/>
        </subant>
        <exec executable="${ndk.dir}/ndk-build" dir="${cxx.path.to.project.dir}" failonerror="true" failifexecutionfails="true">
            <arg value="clean" />
        </exec>
    </target>

    <!--                        Build                                       -->

    <target name="-build.cxx.runtimes">
        <antcall target="-call.cxx.runtime">
            <param name="call.target" value="-build.cxx.runtime"/>
        </antcall>
    </target>

    <target name="-build.cxx.runtime" depends="-setup.cxx.runtime.call">    
        <subant target="${build.target}">
          <property name="sdk.dir" value="${sdk.dir}"/>
          <property name="dont.do.deps" value="true"/>
          <property name="proguard.enabled" value="false"/>
          <fileset dir="." includes="${cxx.runtime.path}/build.xml"/>
        </subant>
        <exec executable="${ndk.dir}/ndk-build" dir="${cxx.path.to.project.dir}" failonerror="true" failifexecutionfails="true"/> 
    </target>

    <!--                        Package                                     -->

    <target name="-package.cxx.runtimes">
        <antcall target="-call.cxx.runtime">
            <param name="call.target" value="-package.cxx.runtime"/>
        </antcall>
    </target>

    <target name="-package.cxx.runtime" depends="-setup.cxx.runtime.call">
        <condition property="build.target.extension" value=".debug" else="">
            <equals arg1="${build.target}" arg2="debug" casesensitive="false"/>
        </condition>
        <condition property="build.target.directory" value="Debug" else="Release">
            <equals arg1="${build.target}" arg2="debug" casesensitive="false"/>
        </condition>
        <property name="cxx.path.to.libs.dir" value="libs/${build.target.directory}/${deploy.platform}" />
        <property name="cxx.path.to.libs.framework.dir" value="${cxx.path.to.libs.dir}/${cxx.framework.name}" />
        <mkdir dir="${cxx.path.to.libs.framework.dir}"/>
        <copy overwrite="true" file="${cxx.path.to.project.dir}/exported/Android.mk" tofile="${cxx.path.to.libs.framework.dir}/Android.mk"/>
        <mkdir dir="${cxx.path.to.libs.framework.dir}/includes"/>
        <copy overwrite="true" todir="${cxx.path.to.libs.framework.dir}/includes">
            <fileset dir="${cxx.path.to.project.dir}/jni/cxx/external" />
        </copy>
        <mkdir dir="${cxx.path.to.libs.framework.dir}/libs"/>
        <copy overwrite="true" todir="${cxx.path.to.libs.framework.dir}/libs">
            <fileset dir="${cxx.path.to.project.dir}/libs" />
        </copy>
        <mkdir dir="${cxx.path.to.libs.framework.dir}/libs"/>
        <copy overwrite="true" todir="${cxx.path.to.libs.framework.dir}/libs">
            <fileset dir="${cxx.path.to.project.dir}/obj/local">
                <include name="**/*.a"/>
            </fileset>
        </copy>
        <copy overwrite="true" file="${cxx.path.to.project.dir}/bin/classes.jar" tofile="${cxx.path.to.libs.framework.dir}${build.target.extension}.jar"/>
        <mkdir dir="${cxx.path.to.libs.dir}"/>
        <copy overwrite="true" todir="${cxx.path.to.libs.dir}">
            <fileset dir="${cxx.path.to.project.dir}/libs" includes="*.jar"/>
        </copy>
    </target>    
    
</project>
